pipeline {
    agent {
       label "securin"
    }
    environment {
        GIT_HASH = GIT_COMMIT.take(7)
    }


    stages {

        stage('Load Config') {
            steps {
                script {
                    echo "Branch Name : ${env.BRANCH_NAME}"

                    if (env.BRANCH_NAME == 'develop' || env.BRANCH_NAME == 'dev') {
                        ENV_NAME = 'dev'
                    } else if (env.BRANCH_NAME =~ /feature\//) {
                        ENV_NAME = 'feature'
                    } else if (env.BRANCH_NAME =~ /release\//) {
                        ENV_NAME = 'prod'
                    }
                    else {
                        ENV_NAME = 'UNKNOWN'
                    }

                    echo "BRANCH: ${env.BRANCH_NAME} and ENV_NAME : ${ENV_NAME}"

                    if ( ENV_NAME == 'dev' || ENV_NAME == 'prod' ) {
                        data = readYaml file: "config.yaml"
                        AMPLIFY_ID = data.get(ENV_NAME).get('AMPLIFY_ID')
                        S3_BUCKET = data.get(ENV_NAME).get('S3_BUCKET')
                        echo "AMPLIFY_ID: ${AMPLIFY_ID} and BUCKET : ${S3_BUCKET}"
                        echo "GIT_HASH :${GIT_HASH}"
                    }
                }
            }
        }
        stage('Install dependencies') {
            steps {
                echo 'Installing dependencies ..'
                sh "cd ui && npm install && cd .."
            }
        }

        stage('Build') {
            steps {
                echo "Building the artifact in 'dev' mode .."
                sh """
                    cd ui
                    npm install
                    npm run build
                    cd ..
                """
            }
        }

        stage('Unit Test') {
            steps {
                echo 'Testing..'
            }
        }

        stage('Container Build'){
            steps {
                script {
                    try {
                        sh "docker build -t flask:latest ."
                    } catch (Exception e)  {
                        echo 'Exception occurred: ' + e.toString()
                        echo 'Ignoring hard exit from container build'
                    }
                }
            }
        }

        stage('Security Scans') {
            parallel {
                stage('Sonarqube') {
                    steps {
                        script {
                            def scannerHome = tool 'SonarQubeScanner47';
                            withSonarQubeEnv('sonar-cloud') {
                                sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=py-demo-app \
                                                                     -Dsonar.organization=csw-devsecops-org \
                                                                     -Dsonar.python.version=3"
                            }
                        }
                    }
                }
                stage('Code Vulnerabilities'){
                    steps {
                        script {
                            sh "bandit --severity-level high . -r -o bandit.json -f json --exit-zero"
                        }
                    }
                }
                stage('ThirdParty Vulnerabilities'){
                    steps {
                        script {
                            try {
                                sh "pip-audit -o pip-audit.json  -f json"
                            } catch (Exception e)  {
                                echo 'Exception occurred: ' + e.toString()
                                echo 'Ignoring hard exit from pip-audit'
                            }
                        }
                    }
                }
                stage('IAC Scan'){
                    steps {
                        script {
                            try {
                                sh "checkov --directory ${env.WORKSPACE}/terraform-scripts -o junitxml > result.xml"
                            } catch (Exception e)  {
                                echo 'Exception occurred: ' + e.toString()
                                echo 'Ignoring hard exit from checkov'
                            }
                        }
                    }
                }
                stage('Container Scan'){
                    steps {
                        script {
                            try {
                                // sh "anchore-cli --u admin --p foobar --url http://10.13.33.154:8228/v1 image add flask:latest"
                                echo "Container Scan"
                            } catch (Exception e)  {
                                echo 'Exception occurred: ' + e.toString()
                                echo 'Ignoring hard exit from container scanner tool'
                            }
                        }
                    }
                }
            }
        }

        stage('Gather Reports'){
            when {
                expression { env.BRANCH_NAME == 'develop' }
            }
            steps {
                echo "Collecting reports from all scanners .. "
                sh "mkdir ${env.WORKSPACE}/reports"
                script {
                    sh "python scripts/make_pip_audit_report.py -s pip-audit.json -o ${env.WORKSPACE}/reports/pip-audit-formatted.json"
                    sh "python scripts/make_checkov_audit_report.py -s result.xml -o ${env.WORKSPACE}/reports/checkov-formatted.json"
                }
            }
        }

        stage('Ivanti Neurons: Upload') {
            when {
                expression { env.BRANCH_NAME == 'develop' }
            }
            steps {
                echo 'Uploading data into RiskSense ..'
            }
        }

        stage('Ivanti Neurons: CheckPoint') {
            when {
                expression { env.BRANCH_NAME == 'develop' }
            }
            steps {
                echo 'Check if all vulnerability scanner data is within thresholds ..'
            }
        }

        stage('Deploy') {
            when {
                expression { env.BRANCH_NAME == 'develop' }
            }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                                  credentialsId: "tf-${ENV_NAME}-deploy-role",
                                  accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                  secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    withEnv(["AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}",
                             "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}",
                             "AWS_DEFAULT_REGION=us-west-2"]) {
                        script {
                            echo 'Deploying to Amplify application in Dev account'
                            sh "cd ui && ./build-scripts/deploy.sh ${GIT_HASH} ${S3_BUCKET} ${AMPLIFY_ID} ${ENV_NAME}"
                        }
                    }
                }
            }
        }

        stage('Validation Tests') {
            when {
                expression { env.BRANCH_NAME == 'develop' }
            }
            steps {
                echo 'Run validation tests including health checks ..'
                script {
                    sh "python scripts/run_health_checks.py"
                }
            }
        }

        stage('DAST') {
            when {
                expression { env.BRANCH_NAME == 'develop' }
            }
            steps {
                echo 'Running OWASP ZAP scan ..'
                script {
                    echo "Pulling up last OWASP ZAP container --> Start"
                    sh 'docker pull owasp/zap2docker-stable:latest'
                    echo "Pulling up last VMS container --> End"
                    echo "Starting container --> Start"
                    sh """
                     docker run -dt --name owasp owasp/zap2docker-stable /bin/bash
                     docker exec owasp mkdir /zap/wrk
                     docker exec owasp \
                     zap-baseline.py \
                     -t https://dev.d3taz5v9576vwj.amplifyapp.com \
                     -x report.xml \
                     -I
                    """
                }
            }
        }
    }
}
